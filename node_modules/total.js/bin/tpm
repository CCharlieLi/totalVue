#! /usr/bin/env node

'use strict';

var VERSION = 'v1.9.x';

var fs = require('fs');
var ph = require('path');
var parser = require('url');
var zlib = require('zlib');
var http = require('http');
var https = require('https');
var padding = 120;
var exec = require('child_process').exec;
var os = require('os');
var EOF = os.platform() === 'win32' ? '\r\n' : '\n';
var $type = 0;
var settings = {};
var colors = { reset: '\x1b[0m', underscore: '\x1b[4m', dim: '\x1b[2m', reverse: '\x1b[7m', white: '\x1b[37m', red: '\x1b[31m', bgRed: '\x1b[41m', bgGreen: '\x1b[42m' };
var isWindows = os.platform().substring(0, 3).toLowerCase() === 'win';

var current_repository = 'default';
var current_package = '';

String.prototype.padRight = function(max, c) {
    var self = this;
    return self + new Array(Math.max(0, max - self.length + 1)).join(c || ' ');
};

function Backup() {
    this.file = [];
    this.directory = [];
    this.path = '';
    this.fileName = '';

    this.read = { key: '', value: '', status: 0 };

    this.complete = function() {};
    this.filter = function(path) {
        return true;
    };
}

function Walker() {
    this.pending = [];
    this.pendingDirectory = [];
    this.directory = [];
    this.file = [];
    this.options = { sort: true, addEmptyDirectory: false };
    this.onComplete = null;
    this.onFilter = null;
}

Walker.prototype.reset = function() {
    var self = this;
    self.file = [];
    self.directory = [];
    self.pendingDirectory = [];
};

Walker.prototype.walk = function(path) {

    var self = this;

    if (path instanceof Array) {
        var length = path.length;

        for (var i = 0; i < length; i++)
            self.pendingDirectory.push(path[i]);

        self.next();
        return;
    }

    fs.readdir(path, function(err, arr) {

        if (err)
            return self.next();

        if (arr.length === 0 || self.options.addEmptyDirectory) {
            if (self.onFilter === null || self.onFilter(path))
                self.directory.push(path);
        }

        var length = arr.length;
        for (var i = 0; i < length; i++)
            self.pending.push(ph.join(path, arr[i]));

        self.next();
    });
};

Walker.prototype.stat = function(path) {
    var self = this;

    fs.stat(path, function(err, stats) {

        if (err)
            return self.next();

        if (stats.isDirectory())
            self.pendingDirectory.push(path);
        else if (self.onFilter === null || self.onFilter(path))
            self.file.push(path);

        self.next();
    });
};

Walker.prototype.next = function() {
    var self = this;

    if (self.pending.length > 0) {
        var item = self.pending.shift();
        self.stat(item);
        return;
    }

    if (self.pendingDirectory.length > 0) {
        var directory = self.pendingDirectory.shift();
        self.walk(directory);
        return;
    }

    if (self.options.sort) {
        self.file.sort(function(a, b) {
            return a.localeCompare(b);
        });
    }

    self.onComplete(self.directory, self.file);
};

Backup.prototype.backup = function(path, fileName, callback, filter) {

    if (fs.existsSync(fileName))
        fs.unlinkSync(fileName);

    var walker = new Walker();
    var self = this;

    self.fileName = fileName;
    self.path = path;

    if (callback)
        self.complete = callback;

    if (filter)
        self.filter = filter;

    walker.onComplete = function(directory, files) {
        self.directory = directory;
        self.file = files;
        self.$compress();
    };

    walker.walk(path);
};


Backup.prototype.$compress = function() {

    var self = this;
    var length = self.path.length;
    var len = 0;

    if (self.directory.length > 0) {

        len = self.directory.length;

        for (var i = 0; i < len; i++) {
            var o = self.directory[i];
            if (self.filter(o.substring(length)))
                fs.appendFileSync(self.fileName, (o.replace(self.path, '').replace(/\\/g, '/') + '/').padRight(padding) + ':#\n');
        }

        self.directory = [];
    }

    var fileName = self.file.shift();

    if (typeof(fileName) === 'undefined') {
        self.complete(null, self.fileName);
        return;
    }

    if (!self.filter(fileName.substring(length))) {
        self.$compress();
        return;
    }

    var buffer = '';

    fs.readFile(fileName, function(err, data) {
        zlib.gzip(data, function(err, data) {

            if (err)
                return;

            var name = fileName.replace(self.path, '').replace(/\\/g, '/');
            fs.appendFile(self.fileName, name.padRight(padding) + ':' + data.toString('base64') + '\n', function(err) {
                self.$compress();
            });
        });
    });
};

Backup.prototype.restoreKey = function(data) {

    var self = this;
    var read = self.read;

    if (read.status === 1) {
        self.restoreValue(data);
        return;
    }

    var index = -1;
    var tmp = data;

    if (read.status === 2) {
        tmp = read.key + tmp;
        index = tmp.indexOf(':');
    }
    else
        index = tmp.indexOf(':');

    if (index === -1) {
        read.key += data;
        read.status = 2;
        return;
    }

    read.status = 1;
    read.key = tmp.substring(0, index);
    self.restoreValue(tmp.substring(index + 1));
};

Backup.prototype.restoreValue = function(data) {

    var self = this;
    var read = self.read;

    if (read.status !== 1) {
        self.restoreKey(data);
        return;
    }

    var index = data.indexOf('\n');
    if (index === -1) {
        read.value += data;
        return;
    }

    read.value += data.substring(0, index);
    self.restoreFile(read.key.replace(/\s/g, ''), read.value.replace(/\s/g, ''));

    read.status = 0;
    read.value = '';
    read.key = '';

    self.restoreKey(data.substring(index + 1));
};

Backup.prototype.restore = function(filename, path, callback, filter) {

    if (!fs.existsSync(filename)) {
        if (callback)
            callback(new Error('Package file not found.'), path);
        return;
    }

    var self = this;
    self.filter = filter;
    self.createDirectory(path, true);

    var stream = fs.createReadStream(filename);
    var key = '';
    var value = '';
    var status = 0;

    self.path = path;

    stream.on('data', function(buffer) {
        self.restoreKey(buffer.toString('utf8'));
    });

    if (callback) {
        stream.on('end', function() {
            callback(null, path);
            stream = null;
        });
    }

    stream.resume();
};

Backup.prototype.restoreFile = function(key, value) {
    var self = this;

    if (typeof(self.filter) === 'function' && !self.filter(key))
        return;

    if (value === '#') {
        self.createDirectory(key);
        return;
    }

    var path = key;
    var index = key.lastIndexOf('/');

    if (index !== -1) {
        path = key.substring(0, index).trim();
        if (path.length > 0)
            self.createDirectory(path);
    }

    var buffer = new Buffer(value, 'base64');
    zlib.gunzip(buffer, function(err, data) {
        fs.writeFileSync(ph.join(self.path, key), data);
        buffer = null;
    });
};

Backup.prototype.createDirectory = function(p, root) {

    var self = this;

    if (p[0] === '/')
        p = p.substring(1);

    var is = isWindows;

    if (is) {
        if (p[p.length - 1] === '\\')
            p = p.substring(0, p.length - 1);
    } else {
        if (p[p.length - 1] === '/')
            p = p.substring(0, p.length - 1);
    }

    var arr = is ? p.replace(/\//g, '\\').split('\\') : p.split('/');
    var directory = '';

    if (is && arr[0].indexOf(':') !== -1)
        arr.shift();

    var length = arr.length;

    for (var i = 0; i < length; i++) {

        var name = arr[i];

        if (is)
            directory += (directory.length > 0 ? '\\' : '') + name;
        else
            directory += (directory.length > 0 ? '/' : '') + name;

        var dir = ph.join(self.path, directory);
        if (root)
            dir = (is ? '\\' : '/') + dir;

        if (fs.existsSync(dir))
            continue;

        fs.mkdirSync(dir);
    }
};

Backup.prototype.clear = function(path, callback, filter) {

    var self = this;
    var walker = new Walker();
    walker.options.addEmptyDirectory = true;

    if (callback)
        self.complete = callback;

    if (filter)
        self.filter = filter;

    walker.onComplete = function(directory, files) {

        self.file = [];
        self.directory = [];

        if (typeof(filter) !== 'function')
            filter = function(o) { return true; };

        var length = files.length;

        for (var i = 0; i < length; i++) {
            var o = files[i];
            if (filter(o))
                self.file.push(o);
        }

        length = directory.length;
        for (var i = 0; i < length; i++) {

            var o = files[i];

            if (o === path)
                return;

            if (filter(o))
                self.directory.push(o);
        }

        self.directory.sort(function(a, b) {
            if (a.length < b.length)
                return 1;
            else
                return -1;
        });

        self.removeFile();
    };

    walker.walk(path);
};

Backup.prototype.removeFile = function() {

    var self = this;
    var filename = self.file.shift();

    if (typeof(filename) === 'undefined') {
        self.removeDirectory();
        return;
    }

    fs.unlink(filename, function() {
        self.removeFile();
    });
};

Backup.prototype.removeDirectory = function() {

    var self = this;
    var directory = self.directory.shift();

    if (typeof(directory) === 'undefined') {
        self.complete();
        return;
    }

    fs.rmdir(directory, function() {
        self.removeDirectory();
    });
};

function download(url, callback) {

    var uri = parser.parse(url);
    var h = {};
    var encoding = 'utf8';

    h['X-Powered-By'] = 'total.js package manager';

    var options = { protocol: uri.protocol, auth: uri.auth, method: 'GET', hostname: uri.hostname, port: uri.port, path: uri.path, agent: false, headers: h };

    var response = function(res) {
        callback(null, res);
    };

    var con = options.protocol === 'https:' ? https : http;

    try
    {

        var req = con.get(options, response);

        if (callback) {
            req.on('error', function(error) {
                callback(error, null);
            });
        }

        req.end();

    } catch (ex) {
        if (callback)
            callback(ex, null);
        return false;
    }

    return true;
}

function display_help() {
    log(colors.reset);
    log('====== Total.js Package Manager ' + VERSION +' ======');
    log('');
    log(colors.underscore + '===== INSTALL PACKAGE TO THE CURRENT PATH' + colors.reset);
    log('');
    log(colors.red + 'tpm install [optional: package_name] [optional: repository_name]' + colors.reset);
    log('');
    log('EXAMPLE: tpm install ddos');
    log('EXAMPLE: tpm install ddos local-repository');
    log('');
    log(colors.dim + 'Install all total.js packages from package.json:' + colors.reset);
    log('EXAMPLE: tpm install');
    log('');
    log(colors.underscore + '===== UNINSTALL PACKAGE FROM THE CURRENT PATH' + colors.reset);
    log('');
    log(colors.red + 'tpm uninstall [optional: package_name] [optional: repository_name]' + colors.reset);
    log('');
    log('EXAMPLE: tpm uninstall ddos');
    log('EXAMPLE: tpm uninstall ddos local-repository');
    log('');
    log(colors.dim + 'Uninstall all total.js packages from package.json:' + colors.reset);
    log('EXAMPLE: tpm uninstall');
    log('');
    log(colors.underscore + '===== CREATE PACKAGE FROM THE CURRENT PATH CREATE' + colors.reset);
    log('');
    log(colors.red + 'tpm create [important: package_name] [optional: package_directory_to_pack]' + colors.reset);
    log('');
    log('EXAMPLE: tpm create my-project-template');
    log('EXAMPLE: tpm create my-module');
    log('EXAMPLE: tpm create my-module /users/packages/my-package/');
    log('');
    log(colors.underscore + '===== ADD A NEW PACKAGE REPOSITORY' + colors.reset);
    log('');
    log(colors.red + 'tpm repository [repository_name] [repository_url]' + colors.reset);
    log('');
    log('EXAMPLE: tpm repository local http://127.0.0.1:8000/');
    log('EXAMPLE: tpm repository enterprise http://repository.yourcompany.com/packages/totaljs/');
    log('');
    log(colors.underscore + '===== SHOW ALL REGISTERED REPOSITORIES' + colors.reset);
    log('');
    log(colors.red + 'tpm repositories' + colors.reset);
    log('');
    log(colors.underscore + '===== UNPACK PACKAGE' + colors.reset);
    log('');
    log(colors.red + 'tpm unpack [package_name] [optional: target_directory]' + colors.reset);
    log('');
}

function display_repositories() {
    log('');
    log('--- REPOSITORIES ---');
    log('');
    log('Filename: ' + ph.join(ph.dirname(process.argv[1]), 'tpm.json'));
    log('');
    Object.keys(settings).forEach(function(key) {
        log(key.padRight(33) + ': ' + settings[key]);
    });
    log('');
}

function repository_add() {

    if (current_package.length === 0 || current_repository.length === 0) {
        display_repositories();
        return;
    }

    var filename = ph.join(ph.dirname(process.argv[1]), 'tpm.json');

    var last = current_repository[current_repository.length - 1];
    if (last !== '=' && last !== '?' && last !== '/')
        current_repository += '/';

    settings[current_package] = current_repository;
    fs.writeFileSync(filename, JSON.stringify(settings));

    display_repositories();
}

function install(repository, pkgname, cb, append) {

    var name = pkgname;
    if (name.toLowerCase().lastIndexOf('.package') === -1)
        name += '.package';

    var h = name.substring(0, 6);
    if (h === 'http:/' || h === 'https:') {
        var n = ph.basename(name);
        pkgname = n;
        repository = name.substring(0, name.length - n.length);
        name = n;
    }

    log('');
    log(colors.red + '--- INSTALL PACKAGE --' + colors.reset);
    log('');
    log('Package      :', pkgname);
    log('Directory    :', process.cwd());
    log('Download     :', repository + name);

    download(repository + name, function (err, response) {

        if (err) {

            log(colors.bgRed + colors.white + 'Error        :', err + colors.reset);

            if (cb)
                cb();

            return;
        }

        if (response.statusCode !== 200) {
            log(colors.bgRed + colors.white + 'Error        :', response.statusCode + colors.reset);
            log('');

            if (cb)
                cb();

            return;
        }

        var filename = ph.join(process.cwd(), name);
        var stream = fs.createWriteStream(filename);

        response.on('end', function () {

            log('Installing   :', filename);

            var backup = new Backup();
            backup.restore(filename, ph.dirname(filename), function() {
                log('Removing     :', filename);
                fs.unlinkSync(filename);
                log(colors.bgGreen + colors.white + 'Status       :', 'Success' + colors.reset);
                log('');
                if (append) {
                    filename = ph.join(process.cwd(), 'package.json');

                    if (fs.existsSync(filename)) {
                        var obj = JSON.parse(fs.readFileSync(filename).toString('utf8'));
                        if (!obj.tpm)
                            obj.tpm = {};
                        obj.tpm[pkgname] = repository;
                    } else {
                        obj = { tpm: {} };
                        obj.tpm[pkgname] = repository;
                    }

                    fs.writeFileSync(filename, JSON.stringify(obj, null, 4));
                }

                if (cb)
                    cb();

            });

        });

        response.pipe(stream);
    });
}

function unpack(filename, target) {
    var backup = new Backup();
    backup.restore(filename, target ? target : ph.dirname(filename), function() {
        log(colors.bgGreen + colors.white + 'Status       :', 'Success' + colors.reset);
        log('');
    });
}

function uninstall(repository, pkgname, cb, remove) {

    var name = pkgname;

    if (name.toLowerCase().lastIndexOf('.package') === -1)
        name += '.package';

    log('');
    log(colors.red + '--- UNINSTALL PACKAGE --' + colors.reset);
    log('');
    log('Package      :', pkgname);
    log('Directory    :', process.cwd());
    log('Download     :', repository + name);

    download(repository + name, function (err, response) {

        if (err) {

            log(colors.bgRed + colors.white + 'Error        :', err + colors.reset);

            if (cb)
                cb();

            return;
        }

        if (response.statusCode !== 200) {
            log(colors.bgRed + colors.white + 'Error        :', response.statusCode + colors.reset);
            log('');

            if (cb)
                cb();

            return;
        }

        var filename = ph.join(process.cwd(), name);
        var stream = fs.createWriteStream(filename);
        var arr = [];

        response.on('end', function () {

            log('Reading      :', filename);

            var backup = new Backup();
            backup.restore(filename, ph.dirname(filename), function() {

                arr.sort(function(a, b) {
                    if (a.length > b.length)
                        return -1;
                    if (a.length < b.length)
                        return 1;
                    return a.localeCompare(b);
                });

                arr.forEach(function(path) {
                    try
                    {
                        log('Removing     :', path);
                        unlink(path);
                    } catch (e) {}
                });

                log('Removing     :', filename);
                fs.unlinkSync(filename);
                log(colors.bgGreen + colors.white + 'Status       :', 'Success' + colors.reset);
                log('');

                if (remove) {
                    filename = ph.join(process.cwd(), 'package.json');

                    if (fs.existsSync(filename)) {
                        var obj = JSON.parse(fs.readFileSync(filename).toString('utf8'));
                        if (obj.tpm)
                            delete obj.tpm[pkgname];
                        fs.writeFileSync(filename, JSON.stringify(obj, null, 4));
                    }

                }

                if (cb)
                    cb();

            }, function(path) {
                arr.push(path);
                return false;
            });

        });

        response.pipe(stream);

    });
}

function create() {

    var target = process.cwd();
    var name = current_package;

    var length = process.argv.length;

    if (length === 5) {
        target = process.argv[4];
        name = process.argv[3];
    } else if (length === 4) {
        current_package = process.argv[3];
        name = ph.join(process.cwd(), current_package);
    }

    if (name.toLowerCase().lastIndexOf('.package') === -1)
        name += '.package';

    log('');
    log('--- CREATE PACKAGE --');
    log('');
    log('Package      :', current_package);
    log('Directory    :', target);

    if (name[0] !== '/')
        name = ph.join(process.cwd(), name);

    var backup = new Backup();
    backup.backup(target, name, function(err, path) {

        if (err)
            throw err;

        log('Success      :', path);
        log('');

    }, function(path) {
        // return path.lastIndexOf('.package') === -1;
        return true;
    });
}

function unlink(path) {

    var p = ph.join(process.cwd(), path);

    if (!fs.existsSync(p))
        return;

    var stats = fs.statSync(p);

    if (stats.isFile()) {
        fs.unlinkSync(p);
        unlink(ph.dirname(path));
        return;
    }

     if (fs.readdirSync(p).length === 0)
        fs.rmdirSync(p);
}

function main() {

    var filename = ph.join(ph.dirname(process.argv[1]), 'tpm.json');
    var dir = process.cwd();
    settings = { 'default': 'http://packages.totaljs.com/' + VERSION.replace(/\.+/g, '').replace(/\s+/g, '') + '/' };

    if (fs.existsSync(filename))
        settings = JSON.parse(fs.readFileSync(filename).toString('utf8'));

    if (process.argv.length === 2) {
        display_help();
        return;
    }

    for (var i = 2; i < process.argv.length; i++) {
        var arg = process.argv[i];
        var cmd = arg.toLowerCase();

        if (cmd === '-v' || cmd === '-version') {
            log(VERSION);
            return;
        }

        if (cmd === 'install') {
            $type = 1;
            continue;
        }

        if (cmd === 'uninstall') {
            $type = 4;
            continue;
        }

        if (cmd === 'create') {
            $type = 2;
            continue;
        }

        if (cmd === 'repository') {
            $type = 3;
            continue;
        }

        if (cmd === 'repositories') {
            display_repositories();
            return;
        }

        if (cmd === 'unpack') {
            current_repository = '';
            $type = 6;
            continue;
        }

        if (cmd === 'packages' || cmd === 'list') {
            $type = 5;
            continue;
        }

        if (cmd === '-h' || cmd === '-help' || cmd === '--help' || cmd === 'help') {
            display_help();
            return;
        }

        if (current_package.length > 0)
            current_repository = arg;
        else
            current_package = arg;

        continue;
    }

    switch ($type) {

        case 1:

            if (current_package.length !== 0) {
                install(settings[current_repository], current_package, null, true);
                return;
            }

            var filename = ph.join(process.cwd(), 'package.json');
            var packagejson = {};

            if (!fs.existsSync(filename))
                return;

            packagejson = JSON.parse(fs.readFileSync(filename).toString('utf8'));

            if (!packagejson.tpm)
                return;

            var index = 0;
            var fn = function() {
                var key = Object.keys(packagejson.tpm)[index++];

                if (typeof(key) === 'undefined')
                    return;

                var url = packagejson.tpm[key];

                install(url, key, function() {
                    fn();
                });
            };

            fn();

            break;

        case 2:
            create();
            break;

        case 3:
            repository_add();
            break;

        case 4:

            if (current_package.length !== 0) {
                uninstall(settings[current_repository], current_package, null, true);
                return;
            }

            var filename = ph.join(process.cwd(), 'package.json');
            var packagejson = {};

            if (!fs.existsSync(filename))
                return;

            packagejson = JSON.parse(fs.readFileSync(filename).toString('utf8'));

            if (!packagejson.tpm)
                return;

            var index = 0;
            var fn = function() {
                var key = Object.keys(packagejson.tpm)[index++];

                if (typeof(key) === 'undefined')
                    return;

                var url = packagejson.tpm[key];

                uninstall(url, key, function() {
                    fn();
                }, true);
            };

            fn();
            break;

        case 6:
            unpack(current_package, current_repository);
            break;

        default:
            display_help();
            break;
    }
}

function log() {
    console.log.apply(console, arguments);
}

main();